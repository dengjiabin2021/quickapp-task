<template>
  <div class="wrapper">
    <canvas class="clock-canvas" id="clock-canvas"> </canvas>
  </div>
</template>

<script>
export default {
  initClock() {
    const canvas = this.$element('clock-canvas')
    this.ctx = canvas.getContext('2d')
    this.updateClock()
    this.timer = setInterval(() => this.updateClock(), 1000)
  },

  updateClock() {
    const now = new Date()
    this.ctx.save()
    this.clearClock()
    this.drawClockCenter()
    this.drawScalesAndLines()
    this.drawPointers(now)
    this.ctx.restore()
    this.updateDigitalTime(now)
    this.updateDate(now)
  },

  clearClock() {
    this.ctx.clearRect(0, 0, this.clockRadius << 1, this.clockRadius << 1)
  },

  // 通用函数类，绘制不同的指针
  drawPointers(now) {
    const hour = now.getHours() % 12
    const minute = now.getMinutes()
    const second = now.getSeconds()

    this.drawPointer(hour, minute, this.hourPointerLength, this.hourPointerWidth, '#ad1114', 12)
    this.drawPointer(minute, 0, this.minutePointerLength, this.minutePointerWidth, '#633504', 60)
    this.drawPointer(second, 0, this.secondPointerLength, this.secondPointerWidth, '#f00', 60)
  },

  // 通用的绘制指针函数
  drawPointer(unit, reference, length, width, color, divisor) {
    this.ctx.save()
    this.ctx.beginPath()
    const rad = Math.PI * 2 / divisor * unit + (Math.PI * 2 / divisor / 60 * reference)
    this.ctx.rotate(rad)
    this.ctx.lineWidth = width
    this.ctx.lineCap = 'round'
    this.ctx.moveTo(0, 20)
    this.ctx.lineTo(0, -length)
    this.ctx.strokeStyle = color
    this.ctx.stroke()
    this.ctx.closePath()
    this.ctx.restore()
  },

  drawScalesAndLines() {
    this.ctx.translate(this.clockRadius, this.clockRadius)
    const modifiedRadius = this.clockRadius - 18
    const scaleLineRadius = modifiedRadius - 25
    this.ctx.textAlign = 'center'
    this.ctx.textBaseline = 'middle'
    this.ctx.font = '20px Arial'
    
    this.drawClockScales(modifiedRadius)
    this.drawScaleLines(scaleLineRadius)
  },

  // 绘制时钟数字标记
  drawClockScales(modifiedRadius) {
    for (let i = 0; i < this.scales.length; i++) {
      const rad = Math.PI * 2 / 12 * i
      const x = Math.cos(rad) * modifiedRadius
      const y = Math.sin(rad) * modifiedRadius
      this.ctx.fillStyle = '#000'
      this.ctx.fillText(this.scales[i], x, y)
    }
  },

  // 绘制时钟刻度线
  drawScaleLines(scaleLineRadius) {
    for (let i = 0; i < 60; i++) {
      const rad = Math.PI * 2 / 60 * i
      const x = Math.cos(rad) * scaleLineRadius
      const y = Math.sin(rad) * scaleLineRadius

      this.ctx.beginPath()
      this.ctx.arc(x, y, i % 5 === 0 ? 3 : 1, 0, Math.PI * 2)
      this.ctx.fillStyle = this.scaleLineFill
      this.ctx.closePath()
      this.ctx.fill()
    }
  },

  drawClockCenter() {
    this.ctx.beginPath()
    this.ctx.arc(0, 0, this.centerRadius, 0, Math.PI * 2, true)
    this.ctx.fillStyle = this.centerFill
    this.ctx.fill()
  },

  updateDigitalTime(now) {
    const hours = now.getHours().toString().padStart(2, '0')
    const minutes = now.getMinutes().toString().padStart(2, '0')
    const seconds = now.getSeconds().toString().padStart(2, '0')
    this.digitalTime = `${hours}:${minutes}:${seconds}`
  },

  updateDate(now) {
    const year = now.getFullYear()
    const month = (now.getMonth() + 1).toString().padStart(2, '0')
    const day = now.getDate().toString().padStart(2, '0')
    this.currentDate = `${year}-${month}-${day}`
  },

  private: {
    ctx: null,
    clockRadius: 200,
    centerRadius: 10,
    timer: null,
    hourPointerLength: 80,
    hourPointerWidth: 7,
    minutePointerLength: 120,
    minutePointerWidth: 5,
    secondPointerLength: 150,
    secondPointerWidth: 2,
    centerFill: 'rgba(0, 0, 0, 1)',
    scaleLineFill: 'rgba(0, 0, 0, 1)',
    scales: Array.from({ length: 12 }, (_, i) => i + 1), 
    // 指针的配置
    pointers: {
      hour: {
        length: 80,
        width: 7,
      },
      minute: {
        length: 120,
        width: 5,
      },
      second: {
        length: 150,
        width: 2,
      },
    },
    // 中心和刻度线的颜色配置
    colors: {
      centerFill: 'rgba(0, 0, 0, 1)', // 中心圆的填充颜色
      scaleLineFill: 'rgba(0, 0, 0, 1)', // 刻度线的颜色
    },
  },

  onInit() {
    this.$page.setTitleBar({ text: 'ZixuWang\'s Clock' })
  },

  onShow() {
    this.initClock()
  },

  onDestroy() {
    if (this.timer != null) {
      clearInterval(this.timer)
    }
  },
}
</script>

<style>
.wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  height: 100%;
}

.clock-canvas {
  width: 400px;
  height: 400px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.8);
}
</style>